// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServiceBooking.Buisness.Core.Models.Context;

#nullable disable

namespace ServiceBooking.Buisness.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.ClaimType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("ClaimType", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Phone")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.DocumentTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("DataFiles")
                        .HasColumnType("bytea");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("PK__Document__3214EC2750CDCC8A");

                    b.ToTable("DocumentTable", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.GroupClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int>("ClaimTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupClaim", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.LoginLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Browser")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DeviceCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginLog", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.LoginToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("AccessTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginToken", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.LoginTokenLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("AccessTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginTokenLog", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LookupCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("LookupCategoryID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("PK__Lookup__3214EC2733770E6A");

                    b.HasIndex("LookupCategoryId");

                    b.ToTable("Lookup", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.LookupCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("PK__LookupCa__3214EC2758F40F06");

                    b.ToTable("LookupCategory", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OrgCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Organization", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.PasswordLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordLogin", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.PasswordPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowUserName")
                        .HasColumnType("boolean");

                    b.Property<short>("ChangeIntervalDays")
                        .HasColumnType("smallint");

                    b.Property<short>("DisAllPastPassword")
                        .HasColumnType("smallint");

                    b.Property<string>("DisAllowedChars")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<short>("MinCaps")
                        .HasColumnType("smallint");

                    b.Property<short>("MinLength")
                        .HasColumnType("smallint");

                    b.Property<short>("MinNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("MinSmallChars")
                        .HasColumnType("smallint");

                    b.Property<short>("MinSpecialChars")
                        .HasColumnType("smallint");

                    b.Property<int>("OrgId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.ToTable("PasswordPolicy", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PermissionModuleTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.PermissionModuleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("PermissionModuleType", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.PermissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("PermissionType", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<short?>("Level")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Level = (short)30,
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Level = (short)30,
                            Name = "Raj Doe"
                        });
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.SubPermissionModuleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PermissionModuleTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_SubPermissionModuleTypeId");

                    b.HasIndex("PermissionModuleTypeId");

                    b.ToTable("SubPermissionModuleType", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("AdminLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short?>("EmailValidationStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Isdcode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ISDCode");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("Locked")
                        .HasColumnType("boolean");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short?>("MobileValidationStatus")
                        .HasColumnType("smallint");

                    b.Property<int>("OrgId")
                        .HasColumnType("integer");

                    b.Property<bool?>("TwoFactor")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CoordinatesLatitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal?>("CoordinatesLongitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Details")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__UserAddr__3214EC0771CBBDEE");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK_UserPermission");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroup", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.GroupClaim", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.ClaimType", "ClaimType")
                        .WithMany("GroupClaims")
                        .HasForeignKey("ClaimTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupClaim_ClaimType");

                    b.HasOne("ServiceBooking.Buisness.Core.Models.Group", "Group")
                        .WithMany("GroupClaims")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupClaim_Group");

                    b.HasOne("ServiceBooking.Buisness.Core.Models.Permission", "IdNavigation")
                        .WithOne("GroupClaim")
                        .HasForeignKey("ServiceBooking.Buisness.Core.Models.GroupClaim", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_GroupClaim_Permission");

                    b.Navigation("ClaimType");

                    b.Navigation("Group");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.LoginLog", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.User", "User")
                        .WithMany("LoginLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_LoginLog_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.LoginToken", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.User", "User")
                        .WithMany("LoginTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_LoginToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.LoginTokenLog", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.User", "User")
                        .WithMany("LoginTokenLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_LoginTokenLog_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.Lookup", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.LookupCategory", "LookupCategory")
                        .WithMany("Lookups")
                        .HasForeignKey("LookupCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Lookup__LookupCa__2FCF1A8A");

                    b.Navigation("LookupCategory");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.PasswordLogin", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.User", "User")
                        .WithMany("PasswordLogins")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PasswordLogin_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.PasswordPolicy", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.Organization", "Org")
                        .WithMany("PasswordPolicies")
                        .HasForeignKey("OrgId")
                        .IsRequired()
                        .HasConstraintName("FK_PasswordPolicy_Organization");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.Permission", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.PermissionType", "PermissionType")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Permission_PermissionType_Id");

                    b.Navigation("PermissionType");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.RoleClaim", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.ClaimType", "ClaimType")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleClaim_ClaimType_Id");

                    b.HasOne("ServiceBooking.Buisness.Core.Models.Permission", "Permission")
                        .WithMany("RoleClaims")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleClaim_Permission_Id");

                    b.HasOne("ServiceBooking.Buisness.Core.Models.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleClaim_Role_Id");

                    b.Navigation("ClaimType");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.SubPermissionModuleType", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.PermissionModuleType", "PermissionModuleType")
                        .WithMany("SubPermissionModuleTypes")
                        .HasForeignKey("PermissionModuleTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_SubPermissionModuleTypeId_PermissionModuleType");

                    b.Navigation("PermissionModuleType");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.User", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.Organization", "Org")
                        .WithMany("Users")
                        .HasForeignKey("OrgId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Organization");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.UserAddress", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserAddre__UserI__43D61337");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.UserClaim", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.ClaimType", "ClaimType")
                        .WithMany("UserClaims")
                        .HasForeignKey("ClaimTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_UserClaim_ClaimType_Id");

                    b.HasOne("ServiceBooking.Buisness.Core.Models.Permission", "Permission")
                        .WithMany("UserClaims")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_UserClaim_Permission_Id");

                    b.HasOne("ServiceBooking.Buisness.Core.Models.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserClaim_User_Id");

                    b.Navigation("ClaimType");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.UserGroup", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_UserGroup_Group_Id");

                    b.HasOne("ServiceBooking.Buisness.Core.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserGroup_User_Id");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.UserRole", b =>
                {
                    b.HasOne("ServiceBooking.Buisness.Core.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Role_UserRole");

                    b.HasOne("ServiceBooking.Buisness.Core.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_User_UserRole");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.ClaimType", b =>
                {
                    b.Navigation("GroupClaims");

                    b.Navigation("RoleClaims");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.Group", b =>
                {
                    b.Navigation("GroupClaims");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.LookupCategory", b =>
                {
                    b.Navigation("Lookups");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.Organization", b =>
                {
                    b.Navigation("PasswordPolicies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.Permission", b =>
                {
                    b.Navigation("GroupClaim");

                    b.Navigation("RoleClaims");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.PermissionModuleType", b =>
                {
                    b.Navigation("SubPermissionModuleTypes");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.PermissionType", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ServiceBooking.Buisness.Core.Models.User", b =>
                {
                    b.Navigation("LoginLogs");

                    b.Navigation("LoginTokenLogs");

                    b.Navigation("LoginTokens");

                    b.Navigation("PasswordLogins");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserClaims");

                    b.Navigation("UserGroups");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
